#include <iostream>
#include "Rijndael.h"

using namespace std;

const unsigned int sBox[16][16] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

const unsigned int rCon[4][10] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void testSubBytes() {

    // Initialisation
    int count = 0;

    unsigned char state[4][4] = {
        0x19, 0xa0, 0x9a, 0xe9,
        0x3d, 0xf4, 0xc6, 0xf8,
        0xe3, 0xe2, 0x8d, 0x48,
        0xbe, 0x2b, 0x2a, 0x08
    };
 
    unsigned int expectedState[4][4] = {
        0xd4, 0xe0, 0xb8, 0x1e,
        0x27, 0xbf, 0xb4, 0x41,
        0x11, 0x98, 0x5d, 0x52,
        0xae, 0xf1, 0xe5, 0x30
    };

    // Transformation
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            int column = state[i][j] & 0x0f;
            int line = (state[i][j] >> 4) & 0xff;
            state[i][j] = sBox[line][column];
        }
    }

    // Test
    cout << "Test subBytes..." << endl;

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (state[i][j] == expectedState[i][j]) {
                cout << "ok" << endl;
                count++;
            }
            else {
                cout << "pas ok" << endl;
            }
        }
    }

    if (count == 16) {
        cout << "SubBytes ok!" << endl;
    }
}

void testShiftRows() {

    // Initialisation
    int count = 0;

    unsigned int state[4][4] = {
        0xd4, 0xe0, 0xb8, 0x1e,
        0x27, 0xbf, 0xb4, 0x41,
        0x11, 0x98, 0x5d, 0x52,
        0xae, 0xf1, 0xe5, 0x30
    };

    unsigned int expectedState[4][4] = {
        0xd4, 0xe0, 0xb8, 0x1e,
        0xbf, 0xb4, 0x41, 0x27,
        0x5d, 0x52, 0x11, 0x98,
        0x30, 0xae, 0xf1, 0xe5
    };

    // Transformation
    // Ligne 1
    unsigned char tmp = state[1][0];

    state[1][0] = state[1][1];
    state[1][1] = state[1][2];
    state[1][2] = state[1][3];
    state[1][3] = tmp;

    // Ligne 2
    tmp = state[2][0];
    state[2][0] = state[2][2];
    state[2][2] = tmp;
    tmp = state[2][1];
    state[2][1] = state[2][3];
    state[2][3] = tmp;

    // Ligne 3
    tmp = state[3][0];
    state[3][0] = state[3][3];
    state[3][3] = state[3][2];
    state[3][2] = state[3][1];
    state[3][1] = tmp;

    // Test
    cout << "Test shiftRows..." << endl;

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (state[i][j] == expectedState[i][j]) {
                cout << "ok" << endl;
                count++;
            }
            else {
                cout << "pas ok" << endl;
            }
        }
    }

    if (count == 16) {
        cout << "ShiftRows ok!" << endl;
    }

}

void testMixColumns() {

    // Initialisation
    int count = 0;

    unsigned int state[4][4] = {
        0xd4, 0xe0, 0xb8, 0x1e,
        0xbf, 0xb4, 0x41, 0x27,
        0x5d, 0x52, 0x11, 0x98,
        0x30, 0xae, 0xf1, 0xe5
    };

    unsigned int expectedState[4][4] = {
        0x04, 0xe0, 0x48, 0x28,
        0x66, 0xcb, 0xf8, 0x06,
        0x81, 0x19, 0xd3, 0x26,
        0xe5, 0x9a, 0x7a, 0x4c
    };

    // Transformation
    unsigned char a[4];
    unsigned char b[4];
    unsigned h;
    int col = 0;

    // Mix chaque colonne
    while (col < 4) {
        for (int c = 0; c < 4; c++) {
            a[c] = state[c][col];
            h = state[c][col] & 0x80;
            b[c] = state[c][col] << 1;
            if (h == 0x80) {
                b[c] ^= 0x1B;
            }
        }

        state[0][col] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
        state[1][col] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
        state[2][col] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
        state[3][col] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];

        col++;
    }

    // Test
    cout << "Test mixColumns..." << endl;

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (state[i][j] == expectedState[i][j]) {
                cout << "ok" << endl;
                count++;
            }
            else {
                cout << "pas ok" << endl;
            }
        }
    }

    if (count == 16) {
        cout << "MixColumns ok!" << endl;
    }
}

void testAddRoundKey() {

    // Initialisation
    int count = 0;

    unsigned int state[4][4] = {
        0x04, 0xe0, 0x48, 0x28,
        0x66, 0xcb, 0xf8, 0x06,
        0x81, 0x19, 0xd3, 0x26,
        0xe5, 0x9a, 0x7a, 0x4c
    };

    unsigned int expectedState[4][4] = {
        0xa4, 0x68, 0x6b, 0x02,
        0x9c, 0x9f, 0x5b, 0x6a,
        0x7f, 0x35, 0xea, 0x50,
        0xf2, 0x2b, 0x43, 0x49
    };

    unsigned int roundKey[4][4] = {
        0xa0, 0x88, 0x23, 0x2a,
        0xfa, 0x54, 0xa3, 0x6c,
        0xfe, 0x2c, 0x39, 0x76,
        0x17, 0xb1, 0x39, 0x05
    };

    // Transformation
    for (int col = 0; col < 4; col++) {
        for (int row = 0; row < 4; row++) {
            state[row][col] ^= roundKey[row][col];
        }
    }

    // Test
    cout << "Test addRoundKey..." << endl;

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (state[i][j] == expectedState[i][j]) {
                cout << "ok" << endl;
                count++;
            }
            else {
                cout << "pas ok" << endl;
            }
        }
    }

    if (count == 16) {
        cout << "AddRoundKey ok!" << endl;
    }
}

void testExpandKey() {


    // Initialisation
    int count = 0;
    int countCle = 0;

    unsigned char key[4][4] = {
        0x2b, 0x28, 0xab, 0x09,
        0x7e, 0xae, 0xf7, 0xcf,
        0x15, 0xd2, 0x15, 0x4f,
        0x16, 0xa6, 0x88, 0x3c
    };

    unsigned char expectedRoundKeys[10][4][4] = {
        {
        0xa0, 0x88, 0x23, 0x2a,
        0xfa, 0x54, 0xa3, 0x6c,
        0xfe, 0x2c, 0x39, 0x76,
        0x17, 0xb1, 0x39, 0x05
        },

        {
        0xf2, 0x7a, 0x59, 0x73,
        0xc2, 0x96, 0x35, 0x59,
        0x95, 0xb9, 0x80, 0xf6,
        0xf2, 0x43, 0x7a, 0x7f
        },

        {
        0x3d, 0x47, 0x1e, 0x6d,
        0x80, 0x16, 0x23, 0x7a,
        0x47, 0xfe, 0x7e, 0x88,
        0x7d, 0x3e, 0x44, 0x3b
        },

        {
        0xef, 0xa8, 0xb6, 0xdb,
        0x44, 0x52, 0x71, 0x0b,
        0xa5, 0x5b, 0x25, 0xad,
        0x41, 0x7f, 0x3b, 0x00
        },

        {
        0xd4, 0x7c, 0xca, 0x11,
        0xd1, 0x83, 0xf2, 0xf9,
        0xc6, 0x9d, 0xb8, 0x15,
        0xf8, 0x87, 0xbc, 0xbc
        },

        {
        0x6d, 0x11, 0xdb, 0xca,
        0x88, 0x0b, 0xf9, 0x00,
        0xa3, 0x3e, 0x86, 0x93,
        0x7a, 0xfd, 0x41, 0xfd
        },

        {
        0x4e, 0x5f, 0x84, 0x4e,
        0x54, 0x5f, 0xa6, 0xa6,
        0xf7, 0xc9, 0x4f, 0xdc,
        0x0e, 0xf3, 0xb2, 0x4f
        },

        {
        0xea, 0xb5, 0x31, 0x7f,
        0xd2, 0x8d, 0x2b, 0x8d,
        0x73, 0xba, 0xf5, 0x29,
        0x21, 0xd2, 0x60, 0x2f
        },

        {
        0xac, 0x19, 0x28, 0x57,
        0x77, 0xfa, 0xd1, 0x5c,
        0x66, 0xdc, 0x29, 0x00,
        0xf3, 0x21, 0x41, 0x6e
        },

        {
        0xd0, 0xc9, 0xe1, 0xb6,
        0x14, 0xee, 0x3f, 0x63,
        0xf9, 0x25, 0x0c, 0x0c,
        0xa8, 0x89, 0xc8, 0xa6
        }
    };

    unsigned char roundKeys[10][4][4];

    // Transformation
    unsigned char currentKey[4][4], tmp;
    unsigned char previousKey[4][4];
    int col, row;

    // Remplissage clé précédente
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            previousKey[i][j] = key[i][j];
        }
    }

    for (int cle = 0; cle < 10; cle++) {

        // Colonne 1
        for (int i = 0; i < 4; i++) {
            currentKey[i][0] = previousKey[i][3];
        }

        // Rot word
        tmp = currentKey[0][0];
        currentKey[0][0] = currentKey[1][0];
        currentKey[1][0] = currentKey[2][0];
        currentKey[2][0] = currentKey[3][0];
        currentKey[3][0] = tmp;

        // SubBytes
        for (int i = 0; i < 4; i++) {
            col = currentKey[i][0] & 0x0f;
            row = (currentKey[i][0] >> 4) & 0x0f;
            currentKey[i][0] = sBox[row][col];
        }

        // Xor avec la première colonne de la previous key et le Rcon
        for (int line = 0; line < 4; line++) {
            currentKey[line][0] = previousKey[line][0] ^ currentKey[line][0] ^ rCon[line][cle];
        }


        // Colonnes 2, 3 , 4
        for (int column = 1; column < 4; column++) {
            for (int line = 0; line < 4; line++) {
                currentKey[line][column] = currentKey[line][column - 1] ^ previousKey[line][column];
            }
        }

        // Passe a la prochaine clé
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                previousKey[i][j] = currentKey[i][j];
            }
        }

        // Ajout de la round key à la liste de rounds keys
        for (int r = 0; r < 4; r++) {
            for (int c = 0; c < 4; c++) {
                roundKeys[cle][r][c] = currentKey[r][c];
            }
        }
    }
    
    // Test
    cout << "Test expandKey..." << endl;
    

    // Chaque cle
    for (int cle = 0; cle < 10; cle++) {
        for (int ligne = 0; ligne < 4; ligne++) {
            for (int colonne = 0; colonne < 4; colonne++) {
                if (roundKeys[cle][ligne][colonne] == expectedRoundKeys[cle][ligne][colonne]) {
                    countCle++;
                }
            }
        }

        if (countCle == 16) {
            cout << "cle " << cle+1<< " ok" << endl;
            count++;
        }
        else {
            cout << "cle " << cle+1 << " pas ok" << endl;
        }

        countCle = 0;
    }

    if (count == 10) {
        cout << "ExpandKey ok!" << endl;
    }
    
}

void testChiffrerMorceau() {

    // Initialisation
    unsigned char key[4][4] = {
    0x2b, 0x28, 0xab, 0x09,
    0x7e, 0xae, 0xf7, 0xcf,
    0x15, 0xd2, 0x15, 0x4f,
    0x16, 0xa6, 0x88, 0x3c
    };

    unsigned char morceau[4][4] = {
        0x32, 0x88, 0x31, 0xe0,
        0x43, 0x5a, 0x31, 0x37,
        0xf6, 0x30, 0x98, 0x07,
        0xa8, 0x8d, 0xa2, 0x34
    };

    unsigned char expectedState[4][4] = {
        0x39, 0x02, 0xdc, 0x19,
        0x25, 0xdc, 0x11, 0x6a,
        0x84, 0x09, 0x85, 0x0b,
        0x1d, 0xfb, 0x97, 0x32
    };


    // Chiffrement (décommenter la partie commentée pour tester l'affichage)
    Rijndael* aes = new Rijndael(key);
    aes->chiffrerMorceau(morceau);

}

int main() {
    
    // Test subBytes
    testSubBytes();

    // Test shiftRows
    testShiftRows();

    // Test mixColumns
    testMixColumns();

    // Test addRoundKey
    testAddRoundKey();

    // Test expand key
    testExpandKey();

    // Test Chiffrer morceau
    testChiffrerMorceau();


    return 0;
}
